security:
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    role_hierarchy:
        ROLE_ADMIN: [ROLE_ADMIN_COMENTARIOS, ROLE_EDITOR, ROLE_ADMIN_RESERVA, ROLE_ALLOWED_TO_SWITCH]
        ROLE_EDITOR: [ROLE_ESCRITOR]
        ROLE_ESCRITOR:
        ROLE_ADMIN_RESERVA: [ROLE_RESERVA]
        ROLE_RESERVA:
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
#            anonymous: lazy
            lazy: true
            provider: app_user_provider
            custom_authenticator:
                - App\Security\LoginFormAuthenticator
#            guard:
#                authenticators:
#                    - App\Security\LoginFormAuthenticator
#                    - App\Security\ApiTokenAuthenticator
#            entry_point: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                target: /
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 2592000 # 30 days in seconds
                always_remember_me: true
            switch_user: true


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/reserva/vistaReserva/\s+$/\s+$/presente, roles: ROLE_RESERVA }
        - { path: ^/index/alameda, roles: ROLE_ADMIN }
#        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/profile, roles: PUBLIC_ACCESS }
        - { path: ^/login$, role: PUBLIC_ACCESS }
        - { path: ^/admin/ingreso, role: PUBLIC_ACCESS }
        - { path: ^/index, role: PUBLIC_ACCESS }
        - { path: ^/admin, role: IS_AUTHENTICATED_FULLY }

